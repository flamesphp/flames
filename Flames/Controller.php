<?php

namespace Flames;

use Flames\Collection\Arr;
use Flames\Controller\Response;
use Flames\Controller\Data;

/**
 * This class is an abstract Controller class that provides methods for handling requests and generating responses.
 */
abstract class Controller
{
    /**
     * Handles the onRequest event.
     *
     * @param RequestData $requestData The data associated with the request.
     *
     * @return Response|string The response generated by the onRequest event handler.
     */
    public function onRequest(RequestData $requestData) : Response|string
    {
        return $this->success();
    }

    /**
     * Returns a success response.
     *
     * @param Arr|array|string|null $data The data to be included in the response. Can be an array, an instance of Arr class, or a string.
     * @param int $code The status code of the response. Default is 200.
     * @param Arr|array|null $headers The headers to be included in the response. Can be an array or null.
     *
     * @return Response|string The success response. If the data is a string, an empty string is returned. Otherwise, a Response object is returned, containing the rendered data, original data, status code, and headers.
     */
    public function success(Arr|array|string|null $data = null, int $code = 200, Arr|array|null $headers = null) : Response|string
    {

        if (is_string($data)) {

        } else {
            if (is_array($data) === true) {
                $data = Arr($data);
            }

            $method = self::__getCaller();
            if ($method !== null) {
                $class = static::class;

                if (static::$__methods[$class]->containsKey($method)) {
                    $view = new View();
                    $view->addView(static::$__methods[$class][$method]->path);
                    return new Response($view->render($data), $data, $code, $headers);
                }
            }

            return new Response(null, $data, $code, $headers);
        }

        return '';
    }

    /**
     * Error method
     *
     * @param Arr|array|string|null $data The data to be returned in the error response. Default is null.
     * @param int $code The error code. Default is 200.
     * @param Arr|array|null $headers The additional headers to be included in the response. Default is null.
     * @return Response|string The error response or a string representation of it.
     */
    public function error(Arr|array|string $data = null, int $code = 500, Arr|array|null $headers = null) : Response|string
    {
        return $this->success($data, $code, $headers);
    }

    private static array $__setup = [];
    private static array $__methods = [];

    /**
     * Initializes the static constructor.
     *
     * @return void
     * @internal
     */
    public static function __constructStatic(): void
    {
        $class = static::class;
        if (isset(static::$__setup[$class]) === true && static::$__setup[$class] === true) {
            return;
        }

        static::__setup(Data::mountData($class), $class);
        static::$__setup[$class] = true;
    }

    /**
     * Sets up the class methods.
     *
     * @param Arr $data The data object containing methods information.
     * @param string $class The class name.
     *
     * @return void
     * @internal
     */
    private static function __setup(Arr $data, string $class): void
    {
        static::$__methods[$class] = $data->methods;
    }

    /**
     * Retrieves the name of the last function that called the current method.
     *
     * @return string|null The name of the last function if found, or null if not found.
     * @internal
     */
    private static function __getCaller()
    {
        $controllerClass = static::class;
        $lastFunc = null;

        $debugBacktrace = debug_backtrace();
        foreach ($debugBacktrace as $_debugBacktrace) {
            if ($_debugBacktrace['class'] === $controllerClass) {
                $lastFunc = $_debugBacktrace['function'];
            }
        }

        return $lastFunc;
    }

    public static function run(?string $method = 'onRequest', Arr|array $data = null)
    {
        $controllerClass = static::class;
        $controller = new ($controllerClass);

        if ($data instanceof Arr === true) {
            $data = $data->toArray(false);
        }

        $request = RequestData::getBase();
        if ($data !== null) {
            foreach ($data as $key => $value) {
                $request->request[$key] = $value;
            }
        }

        if ($method === null) {
            $method = 'onRequest';
        }

        return $controller->{$method}($request);
    }
}